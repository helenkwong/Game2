import Character;import KeyBoard;/*---variable-----------------------------------------------------------------*/var characterArray:Array = new Array();var computerArray:Array=new Array(true,true,true,true,true,true);var exerciseArray:Array=new Array(true,true,true,true);var bgSound:Sound = new BackgroundMusic2();var keySound:Sound = new arrow_Click2();var keySoundFinish:Sound = new Sport_finish();var timesUpSound:Sound = new TimesUpSound();var timesUpSoundChannel:SoundChannel;var gameTime:int = 0;var gameMark:Number=6;var gameTimer:Timer=new Timer(1000,180);var gameLevel:int =0;var characterOnStage:int=0; var addCharacterEnable:Boolean = true;var dragObjectIndex:int = -1;var currentCharacterObject:Object = new Object();var characterCompleteExercise:Boolean = false;var openDoor:Boolean = false;var mouseCursorStates:String;var keyboard:KeyBoard;var keyboardArray:Array = new Array();var exerciseObjectArray:Array = new Array(new Array(this.lift_jumping,this.lift_jumping.tool_jumping,"jumping",8,128,235,this.light_jumping),											new Array(this.lift_jumpRope,this.lift_jumpRope.tool_jumpRope,"jumpRope",5,203,220,this.light_jumpRope),											new Array(this.lift_skating,this.lift_skating.tool_skating,"skating2",8,494,245,this.light_skating),											new Array(this.lift_dumbbell,this.lift_dumbbell.tool_dumbbell,"dumbbell",3,437,223,this.light_dumbbell));initGame();/*---Method------------------------------------------------------------------*//*---method - initGame()------------------------------------------------------*/function initGame():void{	stop();		for(var j:int =0; j<4;j++){		exerciseObjectArray[j][0].gotoAndStop(1);  // the exercise lift		exerciseObjectArray[j][1].visible = true;  // the exercise object 		exerciseObjectArray[j][6].visible = false; // the lighting of the exercise	}		currentCharacterObject.name ="null";		//set the index of the display object 		Mouse.hide();	myCursor.visible = true;	myCursor.gotoAndStop("mouseMove");	myCursor.mouseEnabled = false;	myCursor.mouseChildren = false;		this.setChildIndex(bgStage,0);	this.setChildIndex(lift_dumbbell,1);	this.setChildIndex(light_dumbbell,2);		this.setChildIndex(lift_skating,3);	this.setChildIndex(light_skating,4);	this.setChildIndex(lift_jumpRope,5);	this.setChildIndex(light_jumpRope,6);		this.setChildIndex(lift_jumping,7);	this.setChildIndex(light_jumping,8);	this.setChildIndex(topObjectContainer,this.numChildren-2);	this.setChildIndex(myCursor,this.numChildren-1);			// init content	while(characterArray.length >0){		characterArray.pop();	}		while(keyboardArray.length >0){		keyboardArray.pop();	}	for(var k:int = 0; k<6;k++){		computerArray[k] = true;	}	for(var p:int = 0; p<4;p++){		exerciseArray[p] = true;	}	gameMark=6;	markUpdate();	dragObjectIndex = -1;	openDoor = false;	characterOnStage=0;	addCharacterEnable = true;		if(gameLevel == 0){		topObjectContainer.mc_levelUp.gotoAndPlay("level1");		gameTime = 0;	}	gameTimer.addEventListener(TimerEvent.TIMER,timerListener);	stage.addEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler);	this.addEventListener(MouseEvent.MOUSE_DOWN,stageMouseDownHandler);}/*---Level 3------------------------------------------------------------------*/ function exerciseActionComplete():void{		mouseEnabled = true;		mouseChildren  = true;		characterCompleteExercise = true;		while(keyboardArray.length>2){		keyboardArray.pop();	}}/*---At the end of the game---------------------------------------------------*/function gameEnd():void { //remove Character on the stage and listener	//remove character on stage	bgSound.removeEventListener(Event.SOUND_COMPLETE, loopMusic);	if(keyboard != null)	stage.removeEventListener(KeyboardEvent.KEY_UP, keyboard.keyHandlerFunction);	gameTimer.stop();	bgStage.text_timer.text = "00:00";	mouseEnabled = false;	mouseChildren  = false;	gameTimer.removeEventListener(TimerEvent.TIMER,timerListener);		dragObjectIndex = -1;	myCursor.gotoAndStop("mouseMove");	this.removeEventListener(MouseEvent.MOUSE_UP,stageMouseUpHandler);	for (var j=characterArray.length; j>0; j--) {		if (characterArray[j-1]!=null && characterArray[j-1].Isdeath==false) {				characterArray[j-1].characterDie(); 				characterArray[j-1] = null;		}	}	if(keyboard != null){	keyboard.visible = false;	}	mouseEnabled = true;	mouseChildren  = true;}/*---At the character to the game---------------------------------------------*/function addCharacterToGame(computerChoice:int):void {	computerArray[computerChoice]=false;		// set the start pt of the character	var startPointX:Number = int((Math.random()*100%10)+310);	var startPointY:Number = int((Math.random()*100%20)+180);	var mc_character:DisplayObject;	//create character	if(computerChoice%2==1){				mc_character =new Character2(computerChoice,startPointX,startPointY,gameLevel,characterArray.length);	}	else{		mc_character=new Character(computerChoice,startPointX,startPointY,gameLevel,characterArray.length);	}		mc_character.x=startPointX;	mc_character.y=startPointY;	MovieClip(mc_character).cacheAsBitmap = true;		mc_character.name="character"+characterArray.length;	var tempPosition:int = this.getChildIndex(light_jumping)+1;		characterArray.push(mc_character);	this.addChildAt(mc_character,tempPosition);	characterOnStage=characterOnStage+1;		bgStage.play();	addCharacterEnable = false;}/*---Live Update--------------------------------------------------------------*/function liveUpdate():void{		gameMark = gameMark -5;		markUpdate();}/*---update the mark----------------------------------------------------------*/function markUpdate():void{		if(gameMark > 1 && gameMark <42){		bgStage.mc_mark.gotoAndStop(gameMark);	}	else if(gameMark > 41){		timesUpSoundChannel.removeEventListener(Event.SOUND_COMPLETE,loopMusic);		flash.media.SoundMixer.stopAll();		keySoundFinish.play();		mouseEnabled = true;		mouseChildren  = true;				gameTime = gameTime+gameTimer.currentCount;		bgStage.mc_mark.gotoAndStop(42);		stage.removeEventListener(MouseEvent.MOUSE_UP,stageMouseUpHandler);		this.setChildIndex(topObjectContainer,this.numChildren-2);		gameEnd();		topObjectContainer.mc_levelUp.gotoAndStop(1);		if(gameLevel ==1){			topObjectContainer.mc_levelUp.gotoAndPlay("level2");					}		else if(gameLevel ==2){			topObjectContainer.mc_levelUp.gotoAndPlay("level3");					}		else if(gameLevel ==3){			topObjectContainer.mc_gameResult.gotoAndPlay("gameWin");		}	}	else if(gameMark < 2){				timesUpSoundChannel.removeEventListener(Event.SOUND_COMPLETE,loopMusic);		flash.media.SoundMixer.stopAll();		bgStage.mc_mark.gotoAndStop(0);		stage.removeEventListener(MouseEvent.MOUSE_UP,stageMouseUpHandler);		this.setChildIndex(topObjectContainer,this.numChildren-2);		gameEnd();		topObjectContainer.mc_gameResult.gotoAndStop("gameOver");	}	}/*---remove Element from Array------------------------------------------------*/function removeElement(ArrayIndex:int){	characterArray[ArrayIndex] = null;}/*---Listener-----------------------------------------------------------------*/function mouseMoveHandler(evt:MouseEvent):void{	this.setChildIndex(myCursor,numChildren -1);	myCursor.x = mouseX;	myCursor.y = mouseY;}/*---Listener--stageMouseUpHandler--------------------------------------------*/function stageMouseUpHandler(evt:MouseEvent):void{	openDoor =false;	var doExercise:Boolean = false;	MovieClip(currentCharacterObject).stopDrag();	currentCharacterObject.mouseChildren = true;	currentCharacterObject.mouseEnabled = true;	myCursor.gotoAndStop("mouseMove");		for(var h:int = 0;h<4;h++){		if (currentCharacterObject.target0.hitTestObject(exerciseObjectArray[h][0]) && exerciseArray[h]==true) {						//set the character position			currentCharacterObject.x=exerciseObjectArray[h][4];			currentCharacterObject.y=exerciseObjectArray[h][5];									//the sport lift stop 			exerciseObjectArray[h][0].gotoAndStop(2);			//setIndex			var tempIndex:int = this.getChildIndex(exerciseObjectArray[h][0]);			this.setChildIndex(MovieClip(currentCharacterObject),tempIndex+1);			//set the lighting			this.setChildIndex(exerciseObjectArray[h][6],tempIndex+2);			this.exerciseObjectArray[h][6].visible = true;			this.exerciseObjectArray[h][6].play();							this.exerciseArray[h]=false;			this.computerArray[currentCharacterObject.GoToComputerNo]=true;									if(h!=0) exerciseObjectArray[h][1].visible = false;							if(this.gameLevel >1){				characterCompleteExercise = false;				keyboard = new KeyBoard(h,gameLevel);				keyboardArray.push(keyboard);				this.topObjectContainer.addChildAt(keyboard,this.topObjectContainer.numChildren-1);				keyboard.addListenerKey();								this.mouseEnabled = false;				this.mouseChildren  = false;			}			doExercise = true;			gameMark=gameMark+currentCharacterObject.mouseUpHandlerTrigger(exerciseObjectArray[h][2],h);			markUpdate();			break;		}				}	if(doExercise == false){		var tempPosition:int = this.getChildIndex(lift_jumping)+2;		if(exerciseArray[0] == false)			tempPosition = tempPosition+1;		this.setChildIndex(MovieClip(currentCharacterObject),tempPosition);		currentCharacterObject.mouseUpHandlerTrigger("walkFront",-1)		exerciseActionComplete();	}		evt.updateAfterEvent();	stage.removeEventListener(MouseEvent.MOUSE_UP,stageMouseUpHandler);}function characterEnterFrameHandler(evt:Event):void{	if(currentCharacterObject.CharacterDragEnable==true){				if(dragObjectIndex != -1){			currentCharacterObject.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN,true,false));		}	}	}function characterMouseOutHandler(evt:MouseEvent):void {	currentCharacterObject.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP,true,false));	myCursor.gotoAndStop("mouseMove");}function characterMouseUpHandler(evt:MouseEvent):void {	//trace("characterMouseUpHandler");	myCursor.gotoAndStop("mouseMove");	dragObjectIndex = -1;	currentCharacterObject.removeEventListener(MouseEvent.MOUSE_OUT,characterMouseOutHandler);	currentCharacterObject.removeEventListener(MouseEvent.MOUSE_UP,characterMouseUpHandler);	currentCharacterObject.removeEventListener(Event.ENTER_FRAME,characterEnterFrameHandler);}//==============================================================================function stageMouseDownHandler(evt:MouseEvent):void {					if(currentCharacterObject.name != "null"){				currentCharacterObject.removeEventListener(Event.ENTER_FRAME,characterEnterFrameHandler);				currentCharacterObject.removeEventListener(MouseEvent.MOUSE_OUT,characterMouseOutHandler);				currentCharacterObject.removeEventListener(MouseEvent.MOUSE_UP,characterMouseUpHandler);			}			var characterObject:Object=evt.target;			//trace(characterObject.name);			if (characterObject!= null && characterObject.name.indexOf("null")!= 0){									while(characterObject.name.indexOf("instance") == 0){						characterObject = characterObject.parent					}					if (characterObject.name.indexOf("character")==0){											dragObjectIndex = characterObject.CharacterNum;						currentCharacterObject = characterObject ;											if(characterObject.CharacterDragEnable==true){							myCursor.gotoAndStop("mouseDrag");							openDoor = true;							var compIndex =  this.getChildIndex(topObjectContainer);							this.setChildIndex(MovieClip(currentCharacterObject),compIndex-1);														currentCharacterObject.mouseDownTrigger();							currentCharacterObject.x =mouseX;							currentCharacterObject.y  = mouseY +20;							currentCharacterObject.startDrag(false,new Rectangle(50,150,600,230));							currentCharacterObject.mouseChildren = false;							currentCharacterObject.mouseEnabled = false;							stage.addEventListener(MouseEvent.MOUSE_UP,stageMouseUpHandler);						}						else{							currentCharacterObject.addEventListener(MouseEvent.MOUSE_UP,characterMouseUpHandler);							currentCharacterObject.addEventListener(MouseEvent.MOUSE_OUT,characterMouseOutHandler);							currentCharacterObject.addEventListener(Event.ENTER_FRAME,characterEnterFrameHandler);						}					}			}				evt.updateAfterEvent();		}		function changeFormatTime(timeInt:Number):String{			var sec:String = int(timeInt%60).toString();		var min:String = "0"+int(timeInt/60).toString()		if(timeInt%60<10){			sec ="0"+sec;		}		if(timeInt<60){		min ="00";		}		var timeString:String = min+":"+sec ;		return timeString;			}//==============================================================================function loopMusic(e:Event):void{	timesUpSoundChannel.removeEventListener(Event.SOUND_COMPLETE,loopMusic);    if (timesUpSoundChannel!= null)    {      		timesUpSoundChannel = bgSound.play();			timesUpSoundChannel.addEventListener(Event.SOUND_COMPLETE,loopMusic);    }}/*---Listener--Timer----------------------------------------------------------*/function timerListener(e:TimerEvent):void {		Mouse.hide();		if(gameTimer.currentCount==1){			timesUpSoundChannel = bgSound.play();			timesUpSoundChannel.addEventListener(Event.SOUND_COMPLETE,loopMusic);}		if((gameLevel <3 &&  gameTimer.currentCount >120) || gameLevel == 3 && gameTimer.currentCount > 150){			topObjectContainer.mouseEnabled = true;			topObjectContainer.mouseChildren  = true;			bgStage.mc_mark.gotoAndStop(0);			stage.removeEventListener(MouseEvent.MOUSE_UP,stageMouseUpHandler);			this.setChildIndex(topObjectContainer,this.numChildren-2);			gameEnd();			topObjectContainer.mc_gameResult.gotoAndStop("gameOver");			gameLevel = 0;		}		bgStage.text_timer.text = changeFormatTime(gameTimer.currentCount);		if (addCharacterEnable == true || characterOnStage<6 ){					var randomComputerChoice = int((Math.random()*10%6));		if (bgStage.mc_mark.currentFrame >0 && computerArray[randomComputerChoice]==true) 			addCharacterToGame(randomComputerChoice);	}		if((gameLevel <3 &&  gameTimer.currentCount  == 105) || (gameLevel == 3 && gameTimer.currentCount > 135)){			timesUpSound.play();	 }																										 }//===============================================================================================function playSoundKey(soundNo:int):void{	if(soundNo == 0)	keySound.play();	}